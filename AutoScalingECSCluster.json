{
    "Parameters" : {
        "Owner" : {
            "Type" : "String",
            "Description" : "Enter the owner of the ECS cluster."
        },
        "AppName" :{
            "Type" : "String",
            "Description" : "Enter the application name associated with the stack."
        },
        "ECSConfigS3Location" : {
            "Type" : "String",
            "Description" : "Specify the S3 location of the ECS config file to be used for each instance in the cluster. For example: <bucket-name>/<path>/ecs.config"
        },
        "InstanceType" : {
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" : ["t2.micro", "m4.large"],
            "Description" : "Enter t2.micro or m4.large. Default is t2.micro."
        },
        "KeyName" : {
              "Description" : "The EC2 Key Pair to allow SSH access to the instances",
              "Type" : "AWS::EC2::KeyPair::KeyName",
              "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation" : {
            "Description" : "The IP address range that can be used to SSH to the ECS instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "VPC" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "Select which VPC will host the cluster."
        },
        "Subnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "Select the subnets to deploy to."
        },
        "AssignPublicIP" : {
            "Type" : "String",
            "Default" : "false",
            "AllowedValues" : [ "true", "false" ],
            "Description" : "Select whether to assign public IP addresses to the ECS instances."
        }

    },
    "Mappings" : {
        "AWSRegion2AMI" : {
            "us-east-1" : { "ecsOptimized" : "ami-6df8fe7a" },
            "us-west-2" : { "ecsOptimized" : "ami-022b9262" },
            "us-west-1" : { "ecsOptimized" : "ami-1eda8d7e" }
        }
    },
    "Resources" : {
        "EFS" : {
            "Type" : "AWS::EFS::FileSystem",
            "Properties" : {
                "FileSystemTags" : [ 
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster-efs" ] ] },
                    },
                    {
                        "Key" : "Owner",
                        "Value" : { "Ref" : "Owner" },
                    } 
                ],
                "PerformanceMode" : "generalPurpose"
            }
        },
        "EFSMountTargetSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [ 
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster-efs-sg" ] ] },
                    },
                    {
                        "Key" : "Owner",
                        "Value" : { "Ref" : "Owner" },
                    } 
                ],
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster-efs", " mount target security group" ] ] },
                "SecurityGroupIngress" : [ {
                    "IpProtocol" : "tcp",
                    "FromPort" : "2049",
                    "ToPort" : "2049",
                    "SourceSecurityGroupId" : { "Ref" : "InstanceSecurityGroup"}
                } ]
            }
        },
        "MountTarget0": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": { "Ref": "EFS" },
                "SubnetId": {"Fn::Select": [ 0, { "Ref" : "Subnets" } ]},
                "SecurityGroups": [ { "Ref": "EFSMountTargetSecurityGroup" } ]        
            }
        },
        "MountTarget1": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": { "Ref": "EFS" },
                "SubnetId": {"Fn::Select": [ 1, { "Ref" : "Subnets" } ]},
                "SecurityGroups": [ { "Ref": "EFSMountTargetSecurityGroup" } ]        
            }
        },
        "MountTarget2": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": { "Ref": "EFS" },
                "SubnetId": {"Fn::Select": [ 2, { "Ref" : "Subnets" } ]},
                "SecurityGroups": [ { "Ref": "EFSMountTargetSecurityGroup" } ]        
            }
        },
        "EC2IAMRole" : {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument" : {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                ],
                "Policies": [ 
                    {
                        "PolicyName": { "Fn::Join" : [ "-", [ { "Ref" : "AppName" }, "ecs-instance-policy" ] ] },
                        "PolicyDocument": {
                            "Version" : "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ECSConfigS3Location" } ] ] }
                                    ]
                                }
                            ]
                        } 
                    }
                ],
                "Path": { "Fn::Join" : [ "", [ "/", { "Ref" : "AppName" }, "/" ] ] },
                "RoleName": { "Fn::Join" : [ "-", [ { "Ref" : "AppName" }, "ecs-instance-role" ] ] }
          }
        },
        "InstanceProfile" : {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": { "Fn::Join" : [ "", [ "/", { "Ref" : "AppName" }, "/" ] ] },
                "Roles": [ { "Ref" : "EC2IAMRole"} ]
            }
        },
        "ECSInstanceGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : { "Ref" : "Subnets"},
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "1",
                "MaxSize" : "3",
                "Tags" : [ {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster-instance" ] ] },
                        "PropagateAtLaunch" : "true"
                    },
                    {
                        "Key" : "Owner",
                        "Value" : { "Ref" : "Owner" },
                        "PropagateAtLaunch" : "true"
                    } ]
            },
        },
        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "ecsOptimized" ] },
                "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
                "InstanceType" : { "Ref" : "InstanceType" },
                "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
                "KeyName" : { "Ref" : "KeyName" },
                "AssociatePublicIpAddress" : { "Ref" : "AssignPublicIP" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash \n",
                    "yum update -y \n",
                    "yum install -y aws-cli nfs-utils \n",
                    "aws s3 cp s3://", { "Ref" : "ECSConfigS3Location"}, " /etc/ecs/ecs.config \n",
                    "mkdir -p /efs-mount-point/ \n", 
                    "chown ec2-user:ec2-user /efs-mount-point/ \n",
                    "echo \"", { "Ref": "EFS" }, ".efs.", { "Ref" : "AWS::Region" },".amazonaws.com:/ /efs-mount-point nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0\" >> /etc/fstab \n",
                    "mount -a -t nfs4 \n"
                ]]}}         
            }
        },
        "ECSInstanceScaleUpPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "ECSInstanceGroup" },
                "Cooldown" : "60",
                "ScalingAdjustment" : "1"
            }
        },
        "ECSInstanceScaleDownPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "ECSInstanceGroup" },
                "Cooldown" : "60",
                "ScalingAdjustment" : "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 70% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": "70",
                "AlarmActions": [ { "Ref": "ECSInstanceScaleUpPolicy" } ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "ECSInstanceGroup" }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 70% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": "70",
                "AlarmActions": [ { "Ref": "ECSInstanceScaleDownPolicy" } ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "ECSInstanceGroup" }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [ 
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster-instance-sg" ] ] },
                    },
                    {
                        "Key" : "Owner",
                        "Value" : { "Ref" : "Owner" },
                    } 
                ],
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster-instance-sg" ] ] },
                "SecurityGroupIngress" : [ {
                    "IpProtocol" : "tcp",
                    "FromPort" : "22",
                    "ToPort" : "22",
                    "CidrIp" : { "Ref" : "SSHLocation"}
                } ]
            }
        },
        "ECSCluster" : {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
                "ClusterName" : { "Fn::Join" : [ "", [ { "Ref" : "AppName" }, "-ecs-cluster" ] ] }
            }
        }
    }
}